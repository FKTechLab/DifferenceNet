# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/04_eval.ipynb (unless otherwise specified).

__all__ = ['BATCH_SIZE', 'threshold', 'params', 'mode', 'stw', 'ts_range', 'mode', 'test_set', 'test_g', 'transformer',
           'diff_net', 'net', 'net', 'criterion', 'MODEL_SAVE_PATH', 'checkpoint', 'epoch', 'loss', 'lengths', 'avg']

# Cell
import os
import torch
from torch.utils.data import DataLoader
from .dataloader import DatasetTraj, zero_padding, getSTW, splitData, file_dir
from .prep import Transformer
from .model import Difference, TrajectoryDN
import torch.nn as nn
from .train import test

BATCH_SIZE = 4
threshold = 0.5
params = {
    'batch_size': BATCH_SIZE,
    'shuffle': True,
    'collate_fn': zero_padding
}
mode = 'real'
stw = getSTW(mode=mode, is_train=False)
ts_range = range(len(stw))
# Partitions
mode = 'real'
# Generators
test_set = DatasetTraj(ts_range, stw, mode=mode)
test_g = DataLoader(test_set, **params)
transformer = Transformer()
diff_net = Difference(mode='simple')
net = TrajectoryDN(diff_net, n_features=(len(transformer.features_traj))*2) # 2x for org and dest
net = nn.DataParallel(net)
criterion = nn.BCELoss()
print(net)

# Cell
MODEL_SAVE_PATH = os.path.join(file_dir, '../runs', 'run_tran_normalsubtraj_Batch4_EPOCHS1000', f'Epoch{999}.pth')
print('Loading pre-trained model and optimizer weights from ', MODEL_SAVE_PATH)
checkpoint = torch.load(MODEL_SAVE_PATH)
# print(checkpoint['model_state_dict'])
net.load_state_dict(checkpoint['model_state_dict'])
# optimizer = torch.optim.Adam(net.parameters(), lr=lr)
# optimizer.load_state_dict(checkpoint['optimizer_state_dict'])
epoch = checkpoint['epoch']
loss = checkpoint['loss']
lengths = [len(i) for i in stw]
avg = sum(lengths)/len(stw)
print(f'Iterations: {avg}')
loss_list, acc_list, tp_list, tr_list, tf_list = list(), list(), list(), list(), list()
for i in range(int(10)):
    test_loss, test_acc, tp, tr, tf = test(net, test_g, criterion, threshold, mtype='DN')
    loss_list.append(test_loss)
    acc_list.append(test_acc)
    tp_list.append(tp)
    tr_list.append(tr)
    tf_list.append(tf)

from statistics import mean
# print(test_loss, test_acc, tp, tr, tf)
print(mean(loss_list), mean(acc_list), mean(tp_list), mean(tr_list), mean(tf_list))